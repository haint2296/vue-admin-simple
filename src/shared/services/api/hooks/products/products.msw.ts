/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Admin Simple API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { Product } from '../../models'

export const getGetProductsResponseMock = (): Product[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    price: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
    category: faker.string.alpha({ length: { min: 10, max: 20 } }),
    image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    stock: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ),
    attributes: {
      color: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      size: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      weight: faker.helpers.arrayElement([
        faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        undefined,
      ]),
      dimensions: faker.helpers.arrayElement([
        {
          length: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          width: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          height: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  }))

export const getGetProductsResponseMock200 = (): Product[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.string.uuid(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    price: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    status: faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
    category: faker.string.alpha({ length: { min: 10, max: 20 } }),
    image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    stock: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    brand: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ),
    attributes: {
      color: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      size: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      weight: faker.helpers.arrayElement([
        faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
        undefined,
      ]),
      dimensions: faker.helpers.arrayElement([
        {
          length: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          width: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
          height: faker.helpers.arrayElement([
            faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  }))

export const getGetProductsMockHandler = (
  overrideResponse?:
    | Product[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Product[]> | Product[]),
) => {
  return http.get('*/products', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetProductsMockHandler200 = (
  overrideResponse?:
    | Product[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Product[]> | Product[]),
) => {
  return http.get('*/products', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductsResponseMock200(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getProductsMock = () => [getGetProductsMockHandler()]
