/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Admin Simple API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { PostLogin200, PostLogin401, PostLogin500 } from '../../models'

export const getPostLoginResponseMock = (overrideResponse: Partial<PostLogin200> = {}): PostLogin200 => ({
  token: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getPostLoginResponseMock200 = (overrideResponse: Partial<PostLogin200> = {}): PostLogin200 => ({
  token: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getPostLoginResponseMock401 = (overrideResponse: Partial<PostLogin401> = {}): PostLogin401 => ({
  message: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getPostLoginResponseMock500 = (overrideResponse: Partial<PostLogin500> = {}): PostLogin500 => ({
  message: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getPostLoginMockHandler = (
  overrideResponse?:
    | PostLogin200
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostLogin200> | PostLogin200),
) => {
  return http.post('*/login', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostLoginResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getPostLoginMockHandler200 = (
  overrideResponse?:
    | PostLogin200
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostLogin200> | PostLogin200),
) => {
  return http.post('*/login', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostLoginResponseMock200(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getPostLoginMockHandler401 = (
  overrideResponse?:
    | PostLogin401
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostLogin401> | PostLogin401),
) => {
  return http.post('*/login', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostLoginResponseMock401(),
      ),
      { status: 401, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getPostLoginMockHandler500 = (
  overrideResponse?:
    | PostLogin500
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostLogin500> | PostLogin500),
) => {
  return http.post('*/login', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostLoginResponseMock500(),
      ),
      { status: 500, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getAuthMock = () => [getPostLoginMockHandler()]
