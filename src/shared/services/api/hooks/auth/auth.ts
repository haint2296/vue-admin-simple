/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Admin Simple API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/vue-query'
import type { MutationFunction, QueryClient, UseMutationOptions, UseMutationReturnType } from '@tanstack/vue-query'

import { unref } from 'vue'
import type { MaybeRef } from 'vue'

import type { PostLogin200, PostLogin401, PostLogin500, PostLoginBody } from '../../models'

import { request } from '../../../../lib/axios/index'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Login
 */
export const postLogin = (
  postLoginBody: MaybeRef<PostLoginBody>,
  options?: SecondParameter<typeof request>,
  signal?: AbortSignal,
) => {
  postLoginBody = unref(postLoginBody)

  return request<PostLogin200>(
    { url: `/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: postLoginBody, signal },
    options,
  )
}

export const getPostLoginMutationOptions = <TError = PostLogin401 | PostLogin500, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, { data: PostLoginBody }, TContext>
  request?: SecondParameter<typeof request>
}): UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, { data: PostLoginBody }, TContext> => {
  const mutationKey = ['postLogin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, { data: PostLoginBody }> = props => {
    const { data } = props ?? {}

    return postLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>
export type PostLoginMutationBody = PostLoginBody
export type PostLoginMutationError = PostLogin401 | PostLogin500

/**
 * @summary Login
 */
export const usePostLogin = <TError = PostLogin401 | PostLogin500, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, { data: PostLoginBody }, TContext>
    request?: SecondParameter<typeof request>
  },
  queryClient?: QueryClient,
): UseMutationReturnType<Awaited<ReturnType<typeof postLogin>>, TError, { data: PostLoginBody }, TContext> => {
  const mutationOptions = getPostLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
