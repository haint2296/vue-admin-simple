/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Admin Simple API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { User } from '../../models'

export const getGetUsersResponseMock = (): User[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    name: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    address: faker.helpers.arrayElement([
      {
        street: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        city: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        state: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        zip: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        country: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      },
      undefined,
    ]),
    phone: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    website: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['male', 'female', 'other'] as const), undefined]),
    role: faker.helpers.arrayElement([faker.helpers.arrayElement(['admin', 'user'] as const), undefined]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
      undefined,
    ]),
    createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  }))

export const getGetUsersResponseMock200 = (): User[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    name: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    address: faker.helpers.arrayElement([
      {
        street: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        city: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        state: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        zip: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        country: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      },
      undefined,
    ]),
    phone: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    website: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['male', 'female', 'other'] as const), undefined]),
    role: faker.helpers.arrayElement([faker.helpers.arrayElement(['admin', 'user'] as const), undefined]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
      undefined,
    ]),
    createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  }))

export const getGetUsersMockHandler = (
  overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[]),
) => {
  return http.get('*/users', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUsersResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetUsersMockHandler200 = (
  overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[]),
) => {
  return http.get('*/users', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUsersResponseMock200(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getUsersMock = () => [getGetUsersMockHandler()]
