/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Admin Simple API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'

import { HttpResponse, delay, http } from 'msw'

import type { GetMe401, GetMe500, User } from '../../models'

export const getGetMeResponseMock = (overrideResponse: Partial<User> = {}): User => ({
  id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  name: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  address: faker.helpers.arrayElement([
    {
      street: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      city: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      state: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      zip: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      country: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    },
    undefined,
  ]),
  phone: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  website: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['male', 'female', 'other'] as const), undefined]),
  role: faker.helpers.arrayElement([faker.helpers.arrayElement(['admin', 'user'] as const), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  ...overrideResponse,
})

export const getGetMeResponseMock200 = (overrideResponse: Partial<User> = {}): User => ({
  id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  name: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  address: faker.helpers.arrayElement([
    {
      street: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      city: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      state: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      zip: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
      country: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    },
    undefined,
  ]),
  phone: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  website: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['male', 'female', 'other'] as const), undefined]),
  role: faker.helpers.arrayElement([faker.helpers.arrayElement(['admin', 'user'] as const), undefined]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['active', 'inactive', 'pending'] as const),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]),
  ...overrideResponse,
})

export const getGetMeResponseMock401 = (overrideResponse: Partial<GetMe401> = {}): GetMe401 => ({
  message: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getGetMeResponseMock500 = (overrideResponse: Partial<GetMe500> = {}): GetMe500 => ({
  message: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
})

export const getGetMeMockHandler = (
  overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User),
) => {
  return http.get('*/me', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeMockHandler200 = (
  overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User),
) => {
  return http.get('*/me', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeResponseMock200(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeMockHandler401 = (
  overrideResponse?: GetMe401 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetMe401> | GetMe401),
) => {
  return http.get('*/me', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeResponseMock401(),
      ),
      { status: 401, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getGetMeMockHandler500 = (
  overrideResponse?: GetMe500 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetMe500> | GetMe500),
) => {
  return http.get('*/me', async info => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeResponseMock500(),
      ),
      { status: 500, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getUsersMock = () => [getGetMeMockHandler()]
